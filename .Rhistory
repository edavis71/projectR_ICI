xlab("Standardized Coefficient")
# save at size height = 14, width = 7
pdf("ICI_projectR.TCGA.P7_all.pdf", height = 14, width = 7)
p
colnames(ct.df)[4] <- "pval"
# plot results
plotcols <- rep("black", nrow(ct.df))
plotcols[ct.df$pval <= 0.05] <- "red"
p <- ggplot(ct.df, aes(x = Estimate, y = Names, size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "gray50") +
geom_point(color = plotcols) +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Standardized Coefficient")
# save at size height = 14, width = 7
pdf("ICI_projectR.TCGA.P7_all.pdf", height = 14, width = 7)
p
dev.off()
plot(model_rf)
model_rf$results
model_rf = train(y ~ ., data=rf.in, method='lm')
model_rf$results
plot(model_rf)
varimp_mars <- varImp(model_rf)
plot(varimp_mars, main="Variable Importance with RF")
model_rf$finalModel
plot(varimp_mars, main="Variable Importance with RF")
#############################################################################
# Transfer Learning Analysis: Use projectR package from Fertig Lab to project
# CoGAPs laten factors (i.e. patterns) from a single-cell mouse
# immune-treatment dataset to TCGA data for each cancer type
# In other words, learn the representation of each pattern learned by CoGAPs
# in the mouse data set within TCGA cancer data and look for correlations
# between patterns and survival
# Authors: Michael D. Kessler and Emily Davis Marcisak
#############################################################################
#############################################################################
# Set up environment
#############################################################################
# load packages
#library(projectR)
#library(CePa)
#library(org.Hs.eg.db)
#library(biomaRt)
#library(gplots)
library(reshape2)
library(ggplot2)
#library(CoGAPS)
#library(data.table)
library(ComplexHeatmap)
library(viridis)
#library(GEOquery)
library(RColorBrewer)
#library(ROCR)
library(dplyr)
#library(ggalluvial)
library(TCGAbiolinks)
#library(SummarizedExperiment)
library(readxl)
library(car)
library(caret)
library(randomForest)
library(survminer)
library(RTCGA.clinical)
library(survival)
library(MLeval)
# set working directory
setwd('/Users/michaelkessler/Dropbox/Workspace/POSTDOC/ImmunoOncology/projectR_ICI')
# get valid project IDs
project_IDs <- TCGAbiolinks:::getGDCprojects()$project_id
# get "TCGA" named projects
cancer_types <- project_IDs[grep("TCGA", TCGAbiolinks:::getGDCprojects()$project_id)]
###################################################
### read in data from rds files I made (per cancer type if needed)
###################################################
expTCGA <- readRDS("TCGA_RDS/TCGA.legacy.expression.rds")
metaTCGA <- readRDS("TCGA_RDS/TCGA.legacy.meta.rds")
## save TL results
#saveRDS(TL.proj, file = "TL.TCGA.rds")
# read in if starting analysis from here and don't want to rerun steps above
TL.proj <- readRDS("TL.TCGA.rds")
############################################################################
# Process TL output and meta data
#############################################################################
#transpose TL.proj
TL.proj <- as.data.frame(t(TL.proj))
# add relevant meta data to TL.prov df that contains projected patterns
mtch <- match(rownames(TL.proj), metaTCGA$barcode) # make sure dfs in same order
metaTCGA <- metaTCGA[mtch,]
TL.proj$cancertype <- as.factor(metaTCGA$cancertype)
## add survival measures from Liu et al 2018 https://www.sciencedirect.com/science/article/pii/S0092867418302290#app2
survival_data <- read_excel("1-s2.0-S0092867418302290-mmc1.xlsx")
# add age and survival data to TL.proj df
TL.proj$barcode <- sapply(strsplit(rownames(TL.proj), "-", fixed = T),
function(x) paste(x[1:3], collapse = "-"))
mtch <- match(TL.proj$barcode, survival_data$bcr_patient_barcode)
# add age at diagnosis
TL.proj$age <- survival_data$age_at_initial_pathologic_diagnosis[mtch]
# add survival measures
TL.proj$OS.time <- survival_data$OS.time[mtch]
TL.proj$DSS.time <- survival_data$DSS.time[mtch]
TL.proj$DFI.time <- survival_data$DFI.time[mtch]
TL.proj$PFI.time <- survival_data$PFI.time[mtch]
# add race and gender
TL.proj$gender <- survival_data$gender[mtch]
TL.proj$race <- survival_data$race[mtch]
# add name
TL.proj$name <- rownames(TL.proj)
############################################################################
# Run Models And Graph Results
#############################################################################
# center and scale the patterns
TL.proj[1:21] <- scale(TL.proj[1:21], center = TRUE, scale = TRUE)
TL.proj$cancertype <- as.factor(TL.proj$cancertype)
# melt the data
# melt dataset
TL.proj.m <- reshape2::melt(TL.proj,
id.vars = c("OS.time", "DSS.time", "DFI.time", "PFI.time",
"gender","race", "cancertype", "age", "name"),
na.rm = FALSE, value.name = "value")
# run a linear model with y = survival,
# x = cancer types + every CoGAPs pattern (No Age)
lm.all <- lm(TL.proj$OS.time~TL.proj$cancertype+TL.proj$Pattern_1+
TL.proj$Pattern_2+TL.proj$Pattern_3+TL.proj$Pattern_4+
TL.proj$Pattern_5+TL.proj$Pattern_6+TL.proj$Pattern_7+
TL.proj$Pattern_8+TL.proj$Pattern_9+TL.proj$Pattern_10+
TL.proj$Pattern_11+TL.proj$Pattern_12+TL.proj$Pattern_13+
TL.proj$Pattern_14+TL.proj$Pattern_15+TL.proj$Pattern_16+
TL.proj$Pattern_17+TL.proj$Pattern_18+TL.proj$Pattern_19+
TL.proj$Pattern_20+TL.proj$Pattern_21)
# make a plot of normalized coefficients with CI
# first get coefficnents and CIs
lm.all.coef <- summary(lm.all)$coefficients
xvals <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),1]
CIlow <- xvals - (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
CIhigh <- xvals + (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
pval <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),4]
yvals <- gsub("TL.proj$", "", names(xvals), fixed = T)
dat.df <- data.frame(yvals = factor(yvals, levels = yvals),
xvals = xvals,
CIlow = CIlow,
CIhigh = CIhigh,
pval = pval)
# make plot using ggplot
plotcols <- rep("black", nrow(dat.df))
plotcols[dat.df$pval <= 0.05] <- "red"
p <- ggplot(dat.df, aes(x = xvals, y = yvals, size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "gray50") +
geom_point(color = plotcols) +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Standardized Coefficient")
pdf("ICI_projectR.TCGA.lm.all.no_age.pdf")
p
dev.off()
## linear model WITH age
lm.all <- lm(TL.proj$OS.time~TL.proj$cancertype+TL.proj$Pattern_1+
TL.proj$Pattern_2+TL.proj$Pattern_3+TL.proj$Pattern_4+
TL.proj$Pattern_5+TL.proj$Pattern_6+TL.proj$Pattern_7+
TL.proj$Pattern_8+TL.proj$Pattern_9+TL.proj$Pattern_10+
TL.proj$Pattern_11+TL.proj$Pattern_12+TL.proj$Pattern_13+
TL.proj$Pattern_14+TL.proj$Pattern_15+TL.proj$Pattern_16+
TL.proj$Pattern_17+TL.proj$Pattern_18+TL.proj$Pattern_19+
TL.proj$Pattern_20+TL.proj$Pattern_21+TL.proj$age)
# make a plot of normalized coefficients with CI
# first get coefficnents and CIs
lm.all.coef <- summary(lm.all)$coefficients
xvals <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),1]
CIlow <- xvals - (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
CIhigh <- xvals + (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
pval <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),4]
yvals <- gsub("TL.proj$", "", names(xvals), fixed = T)
dat.df <- data.frame(yvals = factor(yvals, levels = yvals),
xvals = xvals,
CIlow = CIlow,
CIhigh = CIhigh,
pval = pval)
# make plot using ggplot
plotcols <- rep("black", nrow(dat.df))
plotcols[dat.df$pval <= 0.05] <- "red"
p <- ggplot(dat.df, aes(x = xvals, y = yvals, size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "gray50") +
geom_point(color = plotcols) +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Standardized Coefficient")
pdf("ICI_projectR.TCGA.lm.all.age.pdf")
p
dev.off()
# association between patterns and age
lm.all <- lm(TL.proj$age~TL.proj$cancertype+TL.proj$Pattern_1+
TL.proj$Pattern_2+TL.proj$Pattern_3+TL.proj$Pattern_4+
TL.proj$Pattern_5+TL.proj$Pattern_6+TL.proj$Pattern_7+
TL.proj$Pattern_8+TL.proj$Pattern_9+TL.proj$Pattern_10+
TL.proj$Pattern_11+TL.proj$Pattern_12+TL.proj$Pattern_13+
TL.proj$Pattern_14+TL.proj$Pattern_15+TL.proj$Pattern_16+
TL.proj$Pattern_17+TL.proj$Pattern_18+TL.proj$Pattern_19+
TL.proj$Pattern_20+TL.proj$Pattern_21)
# make a plot of normalized coefficients with CI
# first get coefficnents and CIs
lm.all.coef <- summary(lm.all)$coefficients
xvals <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),1]
CIlow <- xvals - (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
CIhigh <- xvals + (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
pval <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),4]
yvals <- gsub("TL.proj$", "", names(xvals), fixed = T)
dat.df <- data.frame(yvals = factor(yvals, levels = yvals),
xvals = xvals,
CIlow = CIlow,
CIhigh = CIhigh,
pval = pval)
# make plot using ggplot
plotcols <- rep("black", nrow(dat.df))
plotcols[dat.df$pval <= 0.05] <- "red"
p <- ggplot(dat.df, aes(x = xvals, y = yvals, size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "gray50") +
geom_point(color = plotcols) +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Standardized Coefficient")
pdf("ICI_projectR.TCGA.lm.age_vs_patterns.pdf")
p
dev.off()
# run linear models per cancer type
ct.names <- c()
ct.out <- c()
for (ct in levels(TL.proj$cancertype)){
TL.proj.ct <- subset(TL.proj, cancertype == ct)
lm.ct <- lm(TL.proj.ct$OS.time~TL.proj.ct$Pattern_1+
TL.proj.ct$Pattern_2+TL.proj.ct$Pattern_3+
TL.proj.ct$Pattern_4+TL.proj.ct$Pattern_5+
TL.proj.ct$Pattern_6+TL.proj.ct$Pattern_7+
TL.proj.ct$Pattern_8+TL.proj.ct$Pattern_9+
TL.proj.ct$Pattern_10+TL.proj.ct$Pattern_11+
TL.proj.ct$Pattern_12+TL.proj.ct$Pattern_13+
TL.proj.ct$Pattern_14+TL.proj.ct$Pattern_15+
TL.proj.ct$Pattern_16+TL.proj.ct$Pattern_17+
TL.proj.ct$Pattern_18+TL.proj.ct$Pattern_19+
TL.proj.ct$Pattern_20+TL.proj.ct$Pattern_21+
TL.proj.ct$age)
#print_output <- paste0(ct,": ",rownames(summary(lm.ct)$coefficients)[8]," ",paste0(summary(lm.ct)$coefficients[8,],collapse = " "))
ct.names <- append(ct.names, ct)
ct.out <- rbind(ct.out, summary(lm.ct)$coefficients[8,])
#print(print_output)
}
# convert output to df, define CI, and plot
ct.df <- as.data.frame(ct.out)
ct.df$Names <- ct.names
ct.df$CIlow <- ct.df$Estimate - (1.96*ct.df$`Std. Error`)
ct.df$CIhigh <- ct.df$Estimate + (1.96*ct.df$`Std. Error`)
colnames(ct.df)[4] <- "pval"
# plot results
plotcols <- rep("black", nrow(ct.df))
plotcols[ct.df$pval <= 0.05] <- "red"
p <- ggplot(ct.df, aes(x = Estimate, y = Names, size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "gray50") +
geom_point(color = plotcols) +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Standardized Coefficient")
# save at size height = 14, width = 7
pdf("ICI_projectR.TCGA.P7_all.pdf", height = 14, width = 7)
p
dev.off()
# explore patterns within SKCM in great depth
TL.proj.SKCM <- subset(TL.proj, cancertype == "TCGA-SKCM")
lm.SKCM <- lm(TL.proj.SKCM$OS.time~TL.proj.SKCM$Pattern_1+
TL.proj.SKCM$Pattern_2+TL.proj.SKCM$Pattern_3+TL.proj.SKCM$Pattern_4+
TL.proj.SKCM$Pattern_5+TL.proj.SKCM$Pattern_6+TL.proj.SKCM$Pattern_7+
TL.proj.SKCM$Pattern_8+TL.proj.SKCM$Pattern_9+TL.proj.SKCM$Pattern_10+
TL.proj.SKCM$Pattern_11+TL.proj.SKCM$Pattern_12+TL.proj.SKCM$Pattern_13+
TL.proj.SKCM$Pattern_14+TL.proj.SKCM$Pattern_15+TL.proj.SKCM$Pattern_16+
TL.proj.SKCM$Pattern_17+TL.proj.SKCM$Pattern_18+TL.proj.SKCM$Pattern_19+
TL.proj.SKCM$Pattern_20+TL.proj.SKCM$Pattern_21+TL.proj.SKCM$age)
# plot coefficients from SKCM model
# first get coefficnents and CIs
lm.SKCM.coef <- summary(lm.SKCM)$coefficients
xvals <- lm.SKCM.coef[grep("Pattern", rownames(lm.SKCM.coef)),1]
CIlow <- xvals - (1.96*lm.SKCM.coef[grep("Pattern", rownames(lm.SKCM.coef)),2])
CIhigh <- xvals + (1.96*lm.SKCM.coef[grep("Pattern", rownames(lm.SKCM.coef)),2])
pval <- lm.SKCM.coef[grep("Pattern", rownames(lm.SKCM.coef)),4]
yvals <- gsub("TL.proj.SKCM$", "", names(xvals), fixed = T)
yvals_order <- yvals
dat.df <- data.frame(yvals = factor(yvals, levels = yvals_order),
xvals = xvals,
CIlow = CIlow,
CIhigh = CIhigh,
pval = pval)
# make plot using ggplot
plotcols <- rep("black", nrow(dat.df))
plotcols[dat.df$pval <= 0.05] <- "red"
p <- ggplot(dat.df, aes(x = xvals, y = yvals, size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "gray50") +
geom_point(color = plotcols) +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Standardized Coefficient")
# save at size height = 15, width = 5
pdf("ICI_projectR.TCGA.lm.SKCM.h15.w5.pdf", height = 15, width = 5)
p
dev.off()
# save at size height = 15, width = 10
pdf("ICI_projectR.TCGA.lm.SKCM.h15.w10.pdf", height = 15, width = 10)
p
dev.off()
# save at size height = 15, width = 8
pdf("ICI_projectR.TCGA.lm.SKCM.h15.w8.pdf", height = 15, width = 8)
p
dev.off()
# save at size height = 12, width = 8
pdf("ICI_projectR.TCGA.lm.SKCM.h12.w8.pdf", height = 12, width = 8)
p
dev.off()
# save at size height = 15, width = 6
pdf("ICI_projectR.TCGA.lm.SKCM.h15.w6.pdf", height = 15, width = 6)
p
dev.off()
# save at size height = 12, width = 6
pdf("ICI_projectR.TCGA.lm.SKCM.h12.w6.pdf", height = 12, width = 6)
p
dev.off()
# Correlation betwen B7 and patterns in all cancers and SKCM specifically
expTCGA.t <- t(expTCGA)
expTCGA.t.B7 <- expTCGA.t[,which(colnames(expTCGA.t) == "CD80" | colnames(expTCGA.t) == "CD86")]
mtch <- match(rownames(TL.proj), rownames(expTCGA.t.B7))
TL.proj.B7 <- cbind(TL.proj, expTCGA.t.B7[mtch,])
# all TCGA samples and B7.1
patterns.B7.1.all <- apply(TL.proj.B7[,c(1:21)], 2,
function(a){
res <- cor.test(a, TL.proj.B7[,32])
return(c(res$estimate, res$conf.int, res$p.value))})
patterns.B7.1.df <- as.data.frame(t(patterns.B7.1.all))
colnames(patterns.B7.1.df) <- c("Estimate","CIlow",
"CIhigh", "pval")
patterns.B7.1.df$pattern <- rownames(patterns.B7.1.df)
patterns.B7.1.df$plotcol <- "black"
patterns.B7.1.df$plotcol[patterns.B7.1.df$pval <= 0.05] <- "red"
# write data to outfile
write.csv(patterns.B7.1.df, file = "patterns.B7.1.csv",
quote = F, row.names = F)
# plot
# make plot using ggplot
p <- ggplot(patterns.B7.1.df, aes(x = Estimate, y = pattern,
size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "grey") +
geom_point(color = patterns.B7.1.df$plotcol) +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Pearson Correlation Coefficient")
pdf("patterns.B7.1.Pearson.pdf", height = 12, width = 6)
p
dev.off()
patterns.B7.2.all <- apply(TL.proj.B7[,c(1:21)], 2,
function(a){
res <- cor.test(a, TL.proj.B7[,33])
return(c(res$estimate, res$conf.int, res$p.value))})
patterns.B7.2.df <- as.data.frame(t(patterns.B7.2.all))
colnames(patterns.B7.2.df) <- c("Estimate","CIlow",
"CIhigh", "pval")
# if pval is zero, set to min for graphing
patterns.B7.2.df$pval[patterns.B7.2.df$pval == 0] <- min(patterns.B7.2.df$pval[patterns.B7.2.df$pval != 0])
patterns.B7.2.df$pattern <- rownames(patterns.B7.2.df)
patterns.B7.2.df$plotcol <- "black"
patterns.B7.2.df$plotcol[patterns.B7.2.df$pval <= 0.05] <- "red"
#View(patterns.B7.2.df)
# write data to outfile
write.csv(patterns.B7.2.df, file = "patterns.B7.2.csv",
quote = F, row.names = F)
# plot
# make plot using ggplot
p <- ggplot(patterns.B7.2.df, aes(x = Estimate, y = pattern,
size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "grey") +
geom_point(color = patterns.B7.2.df$plotcol) +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Pearson Correlation Coefficient")
pdf("patterns.B7.2.Pearson.pdf", height = 12, width = 6)
p
dev.off()
# now repeat but just with SKCM
TL.proj.B7.SKCM <- TL.proj.B7[TL.proj.B7$cancertype == "TCGA-SKCM",]
# all TCGA samples and B7.1
patterns.B7.1.SKCM <- apply(TL.proj.B7.SKCM[,c(1:21)], 2,
function(a){
res <- cor.test(a, TL.proj.B7.SKCM[,32])
return(c(res$estimate, res$conf.int, res$p.value))})
patterns.B7.1.SKCM.df <- as.data.frame(t(patterns.B7.1.SKCM))
colnames(patterns.B7.1.SKCM.df) <- c("Estimate","CIlow",
"CIhigh", "pval")
patterns.B7.1.SKCM.df$pattern <- rownames(patterns.B7.1.SKCM.df)
patterns.B7.1.SKCM.df$plotcol <- "black"
patterns.B7.1.SKCM.df$plotcol[patterns.B7.1.SKCM.df$pval <= 0.05] <- "red"
# write data to outfile
write.csv(patterns.B7.1.SKCM.df, file = "patterns.B7.1.SKCM.csv",
quote = F, row.names = F)
# plot
# make plot using ggplot
p <- ggplot(patterns.B7.1.SKCM.df, aes(x = Estimate, y = pattern,
size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "grey") +
geom_point(color = patterns.B7.1.SKCM.df$plotcol) +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Pearson Correlation Coefficient")
pdf("patterns.B7.1.SKCM.Pearson.pdf", height = 12, width = 6)
p
dev.off()
patterns.B7.2.SKCM <- apply(TL.proj.B7.SKCM[,c(1:21)], 2,
function(a){
res <- cor.test(a, TL.proj.B7.SKCM[,33])
return(c(res$estimate, res$conf.int, res$p.value))})
patterns.B7.2.SKCM.df <- as.data.frame(t(patterns.B7.2.SKCM))
colnames(patterns.B7.2.SKCM.df) <- c("Estimate","CIlow",
"CIhigh", "pval")
# if pval is zero, set to min for graphing
patterns.B7.2.SKCM.df$pval[patterns.B7.2.SKCM.df$pval == 0] <- min(patterns.B7.2.SKCM.df$pval[patterns.B7.2.SKCM.df$pval != 0])
patterns.B7.2.SKCM.df$pattern <- rownames(patterns.B7.2.SKCM.df)
patterns.B7.2.SKCM.df$plotcol <- "black"
patterns.B7.2.SKCM.df$plotcol[patterns.B7.2.SKCM.df$pval <= 0.05] <- "red"
#View(patterns.B7.2.df)
# write data to outfile
write.csv(patterns.B7.2.SKCM.df, file = "patterns.B7.2.SKCM.csv",
quote = F, row.names = F)
# plot
# make plot using ggplot
p <- ggplot(patterns.B7.2.SKCM.df, aes(x = Estimate, y = pattern,
size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "grey") +
geom_point(color = patterns.B7.2.SKCM.df$plotcol) +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Pearson Correlation Coefficient")
pdf("patterns.B7.2.SKCM.Pearson.pdf", height = 12, width = 6)
p
dev.off()
# comment out barplots
# comment out barplots
# pdf("patterns.B7.1.all.pdf")
# comment out barplots
# pdf("patterns.B7.1.all.pdf")
# barplot(patterns.B7.1.all[,1], las = 2,
# comment out barplots
# pdf("patterns.B7.1.all.pdf")
# barplot(patterns.B7.1.all[,1], las = 2,
#         main = "patterns.B7.1.all", ylab = "Pearson Correlation")
# comment out barplots
# pdf("patterns.B7.1.all.pdf")
# barplot(patterns.B7.1.all[,1], las = 2,
#         main = "patterns.B7.1.all", ylab = "Pearson Correlation")
# dev.off()
?cor.test
