# clean up data
for (m in unique(moa.ranks.wide$moa)[3]){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf[, -1], 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- rep(NA, ncol(tempdf))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
print(output_row)
}
print(tempdf[3, 14])
# clean up data
for (m in unique(moa.ranks.wide$moa)[3]){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf[, -1], 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- rep(NA, ncol(tempdf))
for (c in 1:nrow(tempdf)){
print(tempdf[c, cols.notNA[c]])
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
print(output_row)
}
# clean up data
for (m in unique(moa.ranks.wide$moa)[3]){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- rep(NA, ncol(tempdf))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
print(output_row)
}
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- rep(NA, ncol(tempdf))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
View(moa.ranks.wide.cln)
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(NA, ncol(tempdf)-1))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
# set names for output row
names(output_row) <- names(moa.ranks.wide)
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
# reshape moa.ranks from long to wide format
moa.ranks.wide <- spread(moa.ranks, disease, shift)
moa.ranks.wide <- data.frame(moa.ranks.wide)
# remove pval and padj cols
moa.ranks.wide <- moa.ranks.wide[, c(-2, -3)]
moa.ranks.wide.cln <- data.frame()
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(NA, ncol(tempdf)-1))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
# set names for output row
names(output_row) <- names(moa.ranks.wide)
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(NA, ncol(tempdf)-1))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
# set names for output row
names(output_row) <- names(moa.ranks.wide)
print("test")
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(NA, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
# set names for output row
names(output_row) <- names(moa.ranks.wide)
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
View(moa.ranks.wide.cln)
# clean up data
for (m in unique(moa.ranks.wide$moa)[3]){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(NA, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
# set names for output row
names(output_row) <- names(moa.ranks.wide)
print(output_row)
# save output row using rbind
#moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
moa.ranks.wide.cln <- NULL
# clean up data
for (m in unique(moa.ranks.wide$moa)[3]){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(NA, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
if (is.null(moa.ranks.wide.cln)){
# set names for output row
names(output_row) <- names(moa.ranks.wide)
moa.ranks.wide.cln <- output_row
} else{
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
}
View(moa.ranks.wide.cln)
moa.ranks.wide.cln <- NULL
# clean up data
for (m in unique(moa.ranks.wide$moa)[3]){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(NA, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
if (is.null(moa.ranks.wide.cln)){
# set names for output row
colnames(output_row) <- names(moa.ranks.wide)
moa.ranks.wide.cln <- output_row
} else{
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
}
moa.ranks.wide.cln <- c()
# clean up data
for (m in unique(moa.ranks.wide$moa)[3]){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(NA, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
if (length(moa.ranks.wide.cln) == 0){
# set names for output row
#colnames(output_row) <- names(moa.ranks.wide)
moa.ranks.wide.cln <- output_row
} else{
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
}
View(moa.ranks.wide.cln)
moa.ranks.wide.cln <- c()
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(NA, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
if (length(moa.ranks.wide.cln) == 0){
# set names for output row
#colnames(output_row) <- names(moa.ranks.wide)
moa.ranks.wide.cln <- output_row
} else{
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
}
View(moa.ranks.wide.cln)
# clean up row and col names
colnames(moa.ranks.wide.cln) <- colnames(moa.ranks.wide)
# set col names
colnames(moa.ranks.wide.cln) <- colnames(moa.ranks.wide)
# set row names
rownames(moa.ranks.wide.cln) <- moa.ranks.wide.cln$moa
# set col names
colnames(moa.ranks.wide.cln) <- colnames(moa.ranks.wide)
# set row names
rownames(moa.ranks.wide.cln) <- moa.ranks.wide.cln[, 1]
# remove moa col
moa.ranks.wide.cln <- moa.ranks.wide.cln[, -1]
View(moa.ranks.wide.cln)
moa.ranks.wide.cln <- c()
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(0, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
if (length(moa.ranks.wide.cln) == 0){
# set names for output row
#colnames(output_row) <- names(moa.ranks.wide)
moa.ranks.wide.cln <- output_row
} else{
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
}
# set col names
colnames(moa.ranks.wide.cln) <- colnames(moa.ranks.wide)
# set row names
rownames(moa.ranks.wide.cln) <- moa.ranks.wide.cln[, 1]
# remove moa col
moa.ranks.wide.cln <- moa.ranks.wide.cln[, -1]
View(moa.ranks.wide.cln)
# explicitly set to type matrix in advance of plotting with complex heatmap
moa.ranks.wide.cln <- as.matrix(moa.ranks.wide.cln)
View(moa.ranks.wide.cln)
# explicitly set to type matrix in advance of plotting with complex heatmap
moa.ranks.wide.cln <- as.matrix(as.numeric(moa.ranks.wide.cln))
View(moa.ranks.wide.cln)
moa.ranks.wide.cln <- c()
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(0, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
if (length(moa.ranks.wide.cln) == 0){
# set names for output row
#colnames(output_row) <- names(moa.ranks.wide)
moa.ranks.wide.cln <- output_row
} else{
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
}
# set col names
colnames(moa.ranks.wide.cln) <- colnames(moa.ranks.wide)
# set row names
rownames(moa.ranks.wide.cln) <- moa.ranks.wide.cln[, 1]
# remove moa col
moa.ranks.wide.cln <- moa.ranks.wide.cln[, -1]
# explicitly set to type matrix in advance of plotting with complex heatmap
moa.ranks.wide.cln <- as.matrix(moa.ranks.wide.cln)
View(moa.ranks.wide.cln)
# explicitly set contents to type numeric
moa.ranks.wide.cln <- apply(moa.ranks.wide.cln, 1, as.numeric)
View(moa.ranks.wide.cln)
moa.ranks.wide.cln <- c()
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(0, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
if (length(moa.ranks.wide.cln) == 0){
# set names for output row
#colnames(output_row) <- names(moa.ranks.wide)
moa.ranks.wide.cln <- output_row
} else{
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
}
# set col names
colnames(moa.ranks.wide.cln) <- colnames(moa.ranks.wide)
# set row names
rownames(moa.ranks.wide.cln) <- moa.ranks.wide.cln[, 1]
# remove moa col
moa.ranks.wide.cln <- moa.ranks.wide.cln[, -1]
# explicitly set to type matrix in advance of plotting with complex heatmap
moa.ranks.wide.cln <- as.matrix(moa.ranks.wide.cln)
tmp.rn <- rownames(moa.ranks.wide.cln)
# explicitly set contents to type numeric
moa.ranks.wide.cln <- apply(moa.ranks.wide.cln, 2, as.numeric)
# reset rownames
rownames(moa.ranks.wide.cln) ,- tmp.rn
# reset rownames
rownames(moa.ranks.wide.cln) <- tmp.rn
View(moa.ranks.wide.cln)
View(moa.ranks)
# reshape moa.ranks from long to wide format
moa.ranks.wide <- spread(moa.ranks, disease, shift)
moa.ranks.wide <- data.frame(moa.ranks.wide)
# remove pval and padj cols
moa.ranks.wide <- moa.ranks.wide[, c(-2, -3)]
moa.ranks.wide.cln <- c()
# reshape moa.ranks from long to wide format
moa.ranks.wide <- spread(moa.ranks, disease, shift)
moa.ranks.wide <- data.frame(moa.ranks.wide)
# remove pval and padj cols
moa.ranks.wide <- moa.ranks.wide[, c(-2, -3)]
moa.ranks.wide.cln <- c()
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(0, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]] <- tempdf[c, cols.notNA[c]]
}
if (length(moa.ranks.wide.cln) == 0){
# set names for output row
#colnames(output_row) <- names(moa.ranks.wide)
moa.ranks.wide.cln <- output_row
} else{
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
}
# set col names
View(moa.ranks.wide.cln)
View(colnames(moa.ranks.wide))
# set col names
View(moa.ranks.wide.cln)
moa.ranks.wide <- spread(moa.ranks, disease, shift)
moa.ranks.wide <- data.frame(moa.ranks.wide)
# remove pval and padj cols
moa.ranks.wide <- moa.ranks.wide[, c(-2, -3)]
moa.ranks.wide.cln <- c()
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(0, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c+1]] <- tempdf[c, cols.notNA[c]]
}
if (length(moa.ranks.wide.cln) == 0){
# set names for output row
#colnames(output_row) <- names(moa.ranks.wide)
moa.ranks.wide.cln <- output_row
} else{
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
}
# set col names
colnames(moa.ranks.wide.cln) <- colnames(moa.ranks.wide)
# set row names
rownames(moa.ranks.wide.cln) <- moa.ranks.wide.cln[, 1]
# remove moa col
moa.ranks.wide.cln <- moa.ranks.wide.cln[, -1]
# explicitly set to type matrix in advance of plotting with complex heatmap
moa.ranks.wide.cln <- as.matrix(moa.ranks.wide.cln)
tmp.rn <- rownames(moa.ranks.wide.cln)
# explicitly set contents to type numeric
moa.ranks.wide.cln <- apply(moa.ranks.wide.cln, 2, as.numeric)
# reset rownames
rownames(moa.ranks.wide.cln) <- tmp.rn
View(moa.ranks.wide.cln)
# reshape moa.ranks from long to wide format
moa.ranks.wide <- spread(moa.ranks, disease, shift)
moa.ranks.wide <- data.frame(moa.ranks.wide)
# remove pval and padj cols
moa.ranks.wide <- moa.ranks.wide[, c(-2, -3)]
moa.ranks.wide.cln <- c()
# clean up data
for (m in unique(moa.ranks.wide$moa)){
tempdf <- moa.ranks.wide[moa.ranks.wide$moa == m,]
# remove moa col
tempdf <- tempdf[, -1]
# get indexes of cols with non-NA data
cols.notNA <- apply(tempdf, 1, function(x) which(!is.na(x)))
# make new combined reduced output row
output_row <- c(m, rep(0, ncol(tempdf)))
for (c in 1:nrow(tempdf)){
output_row[cols.notNA[c]+1] <- tempdf[c, cols.notNA[c]]
}
if (length(moa.ranks.wide.cln) == 0){
# set names for output row
#colnames(output_row) <- names(moa.ranks.wide)
moa.ranks.wide.cln <- output_row
} else{
# save output row using rbind
moa.ranks.wide.cln <- rbind(moa.ranks.wide.cln, output_row)
}
}
# set col names
colnames(moa.ranks.wide.cln) <- colnames(moa.ranks.wide)
# set row names
rownames(moa.ranks.wide.cln) <- moa.ranks.wide.cln[, 1]
# remove moa col
moa.ranks.wide.cln <- moa.ranks.wide.cln[, -1]
# explicitly set to type matrix in advance of plotting with complex heatmap
moa.ranks.wide.cln <- as.matrix(moa.ranks.wide.cln)
tmp.rn <- rownames(moa.ranks.wide.cln)
# explicitly set contents to type numeric
moa.ranks.wide.cln <- apply(moa.ranks.wide.cln, 2, as.numeric)
# reset rownames
rownames(moa.ranks.wide.cln) <- tmp.rn
View(moa.ranks.wide.cln)
View(moa.ranks.wide.cln)
# write moa.ranks.wide.cln as an rds for Morgan
saveRDS(moa.ranks.wide.cln, file = "moa.ranks.wide.cln")
# write moa.ranks.wide.cln as an rds for Morgan
saveRDS(moa.ranks.wide.cln, file = "moa.ranks.wide.cln.rds")
?readrds
?readRDS
rm(list=ls())
8/9
8/9*.9
9/10*8/9
73.4/90
91.6/138
# set working directory
setwd('/Users/michaelkessler/Dropbox/Workspace/POSTDOC/ImmunoOncology/projectR_ICI')
expTCGA <- readRDS("TCGA_RDS/TCGA.legacy.expression.TCGA-SKCM.rds")
View(expTCGA)
unique(rownames(expTCGA))
length(unique(rownames(expTCGA)))
length(rownames(expTCGA))
match(unique(rownames(expTCGA)), rownames(expTCGA))
length(match(unique(rownames(expTCGA)), rownames(expTCGA)))
# remove duplicate gene names
expTCGA <- expTCGA[match(unique(rownames(expTCGA)), rownames(expTCGA)),]
write.table(expTCGA, "TCGA.legacy.expression.SKCM.GEP.txt", quote = F, sep = "\t")
library(ggbiplot)
?ggbiplot
