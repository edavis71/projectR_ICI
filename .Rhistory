TL.proj$Pattern_5+TL.proj$Pattern_6+TL.proj$Pattern_7+
TL.proj$Pattern_8+TL.proj$Pattern_9+TL.proj$Pattern_10+
TL.proj$Pattern_11+TL.proj$Pattern_12+TL.proj$Pattern_13+
TL.proj$Pattern_14+TL.proj$Pattern_15+TL.proj$Pattern_16+
TL.proj$Pattern_17+TL.proj$Pattern_18+TL.proj$Pattern_19+
TL.proj$Pattern_20+TL.proj$Pattern_21)
# make a plot of normalized coefficients with CI
# first get coefficnents and CIs
lm.all.coef <- summary(lm.all)$coefficients
xvals <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),1]
CIlow <- xvals - (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
CIhigh <- xvals + (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
pval <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),4]
yvals <- gsub("TL.proj$", "", names(xvals), fixed = T)
dat.df <- data.frame(yvals = factor(yvals, levels = yvals),
xvals = xvals,
CIlow = CIlow,
CIhigh = CIhigh,
pval = pval)
# make plot using ggplot
p <- ggplot(dat.df, aes(x = xvals, y = yvals, size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "gray50") +
geom_point(color = "black") +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Standardized Coefficient")
pdf("ICI_projectR.TCGA.lm.all.no_age.pdf")
p
dev.off()
## linear model WITH age
lm.all <- lm(TL.proj$OS.time~TL.proj$cancertype+TL.proj$Pattern_1+
TL.proj$Pattern_2+TL.proj$Pattern_3+TL.proj$Pattern_4+
TL.proj$Pattern_5+TL.proj$Pattern_6+TL.proj$Pattern_7+
TL.proj$Pattern_8+TL.proj$Pattern_9+TL.proj$Pattern_10+
TL.proj$Pattern_11+TL.proj$Pattern_12+TL.proj$Pattern_13+
TL.proj$Pattern_14+TL.proj$Pattern_15+TL.proj$Pattern_16+
TL.proj$Pattern_17+TL.proj$Pattern_18+TL.proj$Pattern_19+
TL.proj$Pattern_20+TL.proj$Pattern_21+TL.proj$age)
# make a plot of normalized coefficients with CI
# first get coefficnents and CIs
lm.all.coef <- summary(lm.all)$coefficients
xvals <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),1]
CIlow <- xvals - (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
CIhigh <- xvals + (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
pval <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),4]
yvals <- gsub("TL.proj$", "", names(xvals), fixed = T)
dat.df <- data.frame(yvals = factor(yvals, levels = yvals),
xvals = xvals,
CIlow = CIlow,
CIhigh = CIhigh,
pval = pval)
# make plot using ggplot
p <- ggplot(dat.df, aes(x = xvals, y = yvals, size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "gray50") +
geom_point(color = "black") +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Standardized Coefficient")
pdf("ICI_projectR.TCGA.lm.all.age.pdf")
p
dev.off()
# association between patterns and age
lm.all <- lm(TL.proj$age~TL.proj$cancertype+TL.proj$Pattern_1+
TL.proj$Pattern_2+TL.proj$Pattern_3+TL.proj$Pattern_4+
TL.proj$Pattern_5+TL.proj$Pattern_6+TL.proj$Pattern_7+
TL.proj$Pattern_8+TL.proj$Pattern_9+TL.proj$Pattern_10+
TL.proj$Pattern_11+TL.proj$Pattern_12+TL.proj$Pattern_13+
TL.proj$Pattern_14+TL.proj$Pattern_15+TL.proj$Pattern_16+
TL.proj$Pattern_17+TL.proj$Pattern_18+TL.proj$Pattern_19+
TL.proj$Pattern_20+TL.proj$Pattern_21)
# make a plot of normalized coefficients with CI
# first get coefficnents and CIs
lm.all.coef <- summary(lm.all)$coefficients
xvals <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),1]
CIlow <- xvals - (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
CIhigh <- xvals + (1.96*lm.all.coef[grep("Pattern", rownames(lm.all.coef)),2])
pval <- lm.all.coef[grep("Pattern", rownames(lm.all.coef)),4]
yvals <- gsub("TL.proj$", "", names(xvals), fixed = T)
dat.df <- data.frame(yvals = factor(yvals, levels = yvals),
xvals = xvals,
CIlow = CIlow,
CIhigh = CIhigh,
pval = pval)
# make plot using ggplot
p <- ggplot(dat.df, aes(x = xvals, y = yvals, size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "gray50") +
geom_point(color = "black") +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Standardized Coefficient")
pdf("ICI_projectR.TCGA.lm.age_vs_patterns.pdf")
p
dev.off()
for (ct in levels(TL.proj$cancertype)){
TL.proj.ct <- subset(TL.proj, cancertype == ct)
lm.ct <- lm(TL.proj.ct$OS.time~TL.proj.ct$Pattern_1+
TL.proj.ct$Pattern_2+TL.proj.ct$Pattern_3+
TL.proj.ct$Pattern_4+TL.proj.ct$Pattern_5+
TL.proj.ct$Pattern_6+TL.proj.ct$Pattern_7+
TL.proj.ct$Pattern_8+TL.proj.ct$Pattern_9+
TL.proj.ct$Pattern_10+TL.proj.ct$Pattern_11+
TL.proj.ct$Pattern_12+TL.proj.ct$Pattern_13+
TL.proj.ct$Pattern_14+TL.proj.ct$Pattern_15+
TL.proj.ct$Pattern_16+TL.proj.ct$Pattern_17+
TL.proj.ct$Pattern_18+TL.proj.ct$Pattern_19+
TL.proj.ct$Pattern_20+TL.proj.ct$Pattern_21+
TL.proj.ct$age)
print_output <- paste0(ct,": ",rownames(summary(lm.ct)$coefficients)[8]," ",paste0(summary(lm.ct)$coefficients[8,],collapse = " "))
print(print_output)
}
# explore patterns within SKCM in great depth
TL.proj.SKCM <- subset(TL.proj, cancertype == "TCGA-SKCM")
lm.SKCM <- lm(TL.proj.SKCM$OS.time~TL.proj.SKCM$Pattern_1+
TL.proj.SKCM$Pattern_2+TL.proj.SKCM$Pattern_3+TL.proj.SKCM$Pattern_4+
TL.proj.SKCM$Pattern_5+TL.proj.SKCM$Pattern_6+TL.proj.SKCM$Pattern_7+
TL.proj.SKCM$Pattern_8+TL.proj.SKCM$Pattern_9+TL.proj.SKCM$Pattern_10+
TL.proj.SKCM$Pattern_11+TL.proj.SKCM$Pattern_12+TL.proj.SKCM$Pattern_13+
TL.proj.SKCM$Pattern_14+TL.proj.SKCM$Pattern_15+TL.proj.SKCM$Pattern_16+
TL.proj.SKCM$Pattern_17+TL.proj.SKCM$Pattern_18+TL.proj.SKCM$Pattern_19+
TL.proj.SKCM$Pattern_20+TL.proj.SKCM$Pattern_21+TL.proj.SKCM$age)
# plot coefficients from SKCM model
# first get coefficnents and CIs
lm.SKCM.coef <- summary(lm.SKCM)$coefficients
xvals <- lm.SKCM.coef[grep("Pattern", rownames(lm.SKCM.coef)),1]
CIlow <- xvals - (1.96*lm.SKCM.coef[grep("Pattern", rownames(lm.SKCM.coef)),2])
CIhigh <- xvals + (1.96*lm.SKCM.coef[grep("Pattern", rownames(lm.SKCM.coef)),2])
pval <- lm.SKCM.coef[grep("Pattern", rownames(lm.SKCM.coef)),4]
yvals <- gsub("TL.proj$", "", names(xvals), fixed = T)
# fix yvals order
yvals_p7 <- yvals[1]
yvals_order <- yvals[2:length(yvals)]
yvals_order <- c(yvals_order[1:6], yvals_p7, yvals_order[7:length(yvals_order)])
dat.df <- data.frame(yvals = factor(yvals, levels = yvals_order),
xvals = xvals,
CIlow = CIlow,
CIhigh = CIhigh,
pval = pval)
# make plot using ggplot
p <- ggplot(dat.df, aes(x = xvals, y = yvals, size = -log10(pval))) +
geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = CIhigh, xmin = CIlow), size = .5, height =
.2, color = "gray50") +
geom_point(color = "black") +
#coord_trans(x = scales:::exp_trans(10)) +
#scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
#         limits = log10(c(0.09,2.5))) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ylab("") +
xlab("Standardized Coefficient")
pdf("ICI_projectR.TCGA.lm.SKCM.pdf")
p
dev.off()
# Correlation betwen B7 and patterns in all cancers and SKCM specifically
expTCGA.t <- t(expTCGA)
expTCGA.t.B7 <- expTCGA.t[,which(colnames(expTCGA.t) == "CD80" | colnames(expTCGA.t) == "CD86")]
mtch <- match(rownames(TL.proj), rownames(expTCGA.t.B7))
TL.proj.B7 <- cbind(TL.proj, expTCGA.t.B7[mtch,])
patterns.B7.1.all <- cor(TL.proj.B7[,c(1:21),], TL.proj.B7[,32])
patterns.B7.2.all <- cor(TL.proj.B7[,c(1:21),], TL.proj.B7[,33])
TL.proj.B7.SKCM <- TL.proj.B7[TL.proj.B7$cancertype == "TCGA-SKCM",]
patterns.B7.1.SKCM <- cor(TL.proj.B7.SKCM[,c(1:21),], TL.proj.B7.SKCM[,32])
patterns.B7.2.SKCM <- cor(TL.proj.B7.SKCM[,c(1:21),], TL.proj.B7.SKCM[,33])
pdf("patterns.B7.1.all.pdf")
barplot(patterns.B7.1.all[,1], las = 2,
main = "patterns.B7.1.all", ylab = "Pearson Correlation")
dev.off()
pdf("patterns.B7.2.all.pdf")
barplot(patterns.B7.2.all[,1], las = 2,
main = "patterns.B7.2.all", ylab = "Pearson Correlation")
dev.off()
pdf("patterns.B7.1.SKCM.pdf")
barplot(patterns.B7.1.SKCM[,1], las = 2,
main = "patterns.B7.1.SKCM", ylab = "Pearson Correlation")
dev.off()
pdf("patterns.B7.2.SKCM.pdf")
barplot(patterns.B7.2.SKCM[,1], las = 2,
main = "patterns.B7.2.SKCM", ylab = "Pearson Correlation")
dev.off()
# Compare activated and resting NK cell proportions, as estimated by CIBERSORTx,
# with TL pattern weights
TCGA.cbr <- read.table("CIBERSORTx_SKCM_Adjusted.txt", sep = "\t", header = T)
#TCGA.cbr <- subset(TCGA.cbr, Correlation >= 0.7)
# save rownames
TCGA.cbr.rownames <- TCGA.cbr[,1]
# select cols with cell proportion estimates
TCGA.cbr <- TCGA.cbr[,2:23]
# assign rownames
rownames(TCGA.cbr) <- TCGA.cbr.rownames
# # match tcga and cibersort rows
mtch <- match(rownames(TL.proj), rownames(TCGA.cbr))
TL.proj.cbr <- TL.proj[which(!is.na(mtch)),]
TL.proj.cbr$NKa <- as.numeric(TCGA.cbr[mtch[which(!is.na(mtch))],]$NK.cells.activated)
TL.proj.cbr$NKr <- as.numeric(TCGA.cbr[mtch[which(!is.na(mtch))],]$NK.cells.resting)
TL.proj.cbr$Tregs <- as.numeric(TCGA.cbr[mtch[which(!is.na(mtch))],]$T.cells.regulatory..Tregs.)
TL.proj.cbr$T8 <- as.numeric(TCGA.cbr[mtch[which(!is.na(mtch))],]$T.cells.CD8)
TL.proj.cbr$MacM1 <- as.numeric(TCGA.cbr[mtch[which(!is.na(mtch))],]$Macrophages.M1)
TL.proj.cbr$MacM2 <- as.numeric(TCGA.cbr[mtch[which(!is.na(mtch))],]$Macrophages.M2)
View(TL.proj.cbr)
View(expTCGA)
View(expTCGA)
View(head(expTCGA))
expTCGA == "CTLA4"
rownames(expTCGA) == "CTLA4"
which(rownames(expTCGA) == "CTLA4")
View(TL.proj.cbr)
expTCGA[which(rownames(expTCGA) == "CTLA4")]
expTCGA[which(rownames(expTCGA) == "CTLA4"),]
View(expTCGA[which(rownames(expTCGA) == "CTLA4"),])
View(head(expTCGA))
rownames(expTCGA[which(rownames(expTCGA) == "CTLA4"),])
names(expTCGA[which(rownames(expTCGA) == "CTLA4"),])
CTLA.exp <- expTCGA[which(rownames(expTCGA) == "CTLA4"),]
CTLA4.exp <- expTCGA[which(rownames(expTCGA) == "CTLA4"),]
match <- match(rownames(TL.proj.cbr), names(CTLA4.exp))
mtch <- match(rownames(TL.proj.cbr), names(CTLA4.exp))
mtch
TL.proj.cbr$CTLA4 <- CTLA4.exp[mtch]
#TL.proj.cbr.sub <- subset(TL.proj.cbr, NKa >= 0.01)
#
cor(TL.proj.cbr[,1:21],TL.proj.cbr$CTLA4)
#TL.proj.cbr.sub <- subset(TL.proj.cbr, NKa >= 0.01)
#
cor(TL.proj.cbr$NKa,TL.proj.cbr$CTLA4)
cor(TL.proj.cbr$NKr,TL.proj.cbr$CTLA4)
TL.proj.cbr.sub <- subset(TL.proj.cbr, NKa >= 0.01)
#
cor(TL.proj.cbr.sub$NKa,TL.proj.cbr.sub$CTLA4)
cor(TL.proj.cbr.sub$NKr,TL.proj.cbr.sub$CTLA4)
?cor
#
plot(TL.proj.cbr.sub$NKa,TL.proj.cbr.sub$CTLA4, use = "spearman")
#
cor(TL.proj.cbr.sub$NKa,TL.proj.cbr.sub$CTLA4, use = "spearman")
#
cor(TL.proj.cbr.sub$NKa,TL.proj.cbr.sub$CTLA4, use = "spearman")
?cor
#
cor(TL.proj.cbr.sub$NKa,TL.proj.cbr.sub$CTLA4, method = "spearman")
#
cor(TL.proj.cbr.sub$NKr,TL.proj.cbr.sub$CTLA4, method = "spearman")
#
cor(TL.proj.cbr$NKr,TL.proj.cbr$CTLA4, method = "spearman")
#
cor(TL.proj.cbr$NKa,TL.proj.cbr$CTLA4, method = "spearman")
cor(TL.proj.cbr$Pattern_7,TL.proj.cbr$CTLA4)
# Train random forest model to predict survival using patterns + age in melanoma (SKCM) tumors
y <- TL.proj.SKCM$OS.time
x <- TL.proj.SKCM[,c(1:22,24)]
View(x)
x <- TL.proj.SKCM[,c(1:21,24)]
rf.in <- cbind(y,x)
# scale age - you already scaled the patterns
rf.in$age <- scale(rf.in$age, center = T, scale = T)
# remove NAs
rf.in <- rf.in[-which(apply(rf.in, 1, function(a) sum(is.na(a)) > 0 )),]
model_rf = train(y ~ ., data=rf.in, method='rf')
2**-4
# model_rf
plot(model_rf)
model_rf
varimp_mars <- varImp(model_rf)
plot(varimp_mars, main="Variable Importance with RF")
# testData2 <- predict(preProcess_range_model, testData)
predicted <- predict(model_rf, rf.in)
plot(rf.in$y, predicted)
cor(rf.in$y, predicted)
# Train random forest model to predict survival using patterns + age in melanoma (SKCM) tumors
y <- TL.proj.SKCM$OS.time
x <- TL.proj.SKCM[,c(1:6,8:21,24)]
rf.in <- cbind(y,x)
# scale age - you already scaled the patterns
rf.in$age <- scale(rf.in$age, center = T, scale = T)
# remove NAs
rf.in <- rf.in[-which(apply(rf.in, 1, function(a) sum(is.na(a)) > 0 )),]
model_rf = train(y ~ ., data=rf.in, method='rf')
model_rf
plot(model_rf)
varimp_mars <- varImp(model_rf)
plot(varimp_mars, main="Variable Importance with RF")
# testData2 <- predict(preProcess_range_model, testData)
predicted <- predict(model_rf)
cor(rf.in$y, predicted)
cor(rf.in$y, predicted)
# testData2 <- predict(preProcess_range_model, testData)
predicted <- predict(model_rf, rf.in)
cor(rf.in$y, predicted)
predicted
# testData2 <- predict(preProcess_range_model, testData)
predicted <- predict(model_rf, rf.in)
cor(rf.in$y, predicted)
plot(rf.in$y, predicted)
# Train random forest model to predict survival using patterns + age in melanoma (SKCM) tumors
y <- TL.proj.SKCM$OS.time
x <- TL.proj.SKCM[,c(1:6,8:21)]
rf.in <- cbind(y,x)
# scale age - you already scaled the patterns
rf.in$age <- scale(rf.in$age, center = T, scale = T)
# remove NAs
rf.in <- rf.in[-which(apply(rf.in, 1, function(a) sum(is.na(a)) > 0 )),]
# Train random forest model to predict survival using patterns + age in melanoma (SKCM) tumors
y <- TL.proj.SKCM$OS.time
x <- TL.proj.SKCM[,c(1:6,8:21)]
rf.in <- cbind(y,x)
# scale age - you already scaled the patterns
#rf.in$age <- scale(rf.in$age, center = T, scale = T)
# remove NAs
rf.in <- rf.in[-which(apply(rf.in, 1, function(a) sum(is.na(a)) > 0 )),]
model_rf = train(y ~ ., data=rf.in, method='rf')
model_rf
plot(model_rf)
varimp_mars <- varImp(model_rf)
plot(varimp_mars, main="Variable Importance with RF")
# testData2 <- predict(preProcess_range_model, testData)
predicted <- predict(model_rf, rf.in)
plot(rf.in$y, predicted)
cor(rf.in$y, predicted)
library(MLeval)
myTrainingControl <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE,
classProbs = TRUE,
verboseIter = TRUE)
myTrainingControl <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE,
classProbs = TRUE,
verboseIter = TRUE)
randomForestFit = train(x = x,
y = y,
method = "rf",
trControl = myTrainingControl,
#preProcess = c("center","scale"),
ntree = 50)
myTrainingControl <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE,
#classProbs = TRUE,
verboseIter = TRUE)
randomForestFit = train(x = x,
y = y,
method = "rf",
trControl = myTrainingControl,
#preProcess = c("center","scale"),
ntree = 50)
# Train random forest model to predict survival using patterns + age in melanoma (SKCM) tumors
y <- TL.proj.SKCM$OS.time
x <- TL.proj.SKCM[,c(1:21,24)]
rf.in <- cbind(y,x)
# scale age - you already scaled the patterns
rf.in$age <- scale(rf.in$age, center = T, scale = T)
# remove NAs
rf.in <- rf.in[-which(apply(rf.in, 1, function(a) sum(is.na(a)) > 0 )),]
myTrainingControl <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE,
#classProbs = TRUE,
verboseIter = TRUE)
randomForestFit = train(x = rf.in,
y = y,
method = "rf",
trControl = myTrainingControl,
#preProcess = c("center","scale"),
ntree = 50)
randomForestFit = train(x = rf.in[,-y],
y = rf.in[,y],
method = "rf",
trControl = myTrainingControl,
#preProcess = c("center","scale"),
ntree = 50)
myTrainingControl <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE,
#classProbs = TRUE,
verboseIter = TRUE)
randomForestFit = train(x = rf.in[,-y],
y = rf.in[,y],
method = "rf",
trControl = myTrainingControl,
#preProcess = c("center","scale"),
ntree = 50)
View(rf.in)
randomForestFit = train(x = rf.in[,2:23],
y = rf.in$y,
method = "rf",
trControl = myTrainingControl,
#preProcess = c("center","scale"),
ntree = 50)
eval.rf <- evalm(randomForestFit)
eval.rf <- evalm(randomForestFit)
randomForestFit
evalm(randomForestFit)
.4*.5
.1*.9
evalm(randomForestFit)
randomForestFit
varImp(randomForestFit)
plot(varImp(randomForestFit))
myTrainingControl <- trainControl(method = "repeatedcv",
number = 10,
savePredictions = TRUE,
#classProbs = TRUE,
verboseIter = TRUE)
randomForestFit = train(x = rf.in[,2:23],
y = rf.in$y,
method = "rf",
trControl = myTrainingControl,
#preProcess = c("center","scale"),
ntree = 50)
myTrainingControl <- trainControl(method = "repeatedcv",
number = 10,
savePredictions = TRUE,
#classProbs = TRUE,
size = 5,
verboseIter = TRUE)
myTrainingControl <- trainControl(method = "repeatedcv",
number = 10,
savePredictions = TRUE,
repeats = 5,
#classProbs = TRUE,
verboseIter = TRUE)
randomForestFit = train(x = rf.in[,2:23],
y = rf.in$y,
method = "rf",
trControl = myTrainingControl,
#preProcess = c("center","scale"),
ntree = 50)
plot(varImp(randomForestFit))
myTrainingControl <- trainControl(method = "repeatedcv",
number = 10,
savePredictions = TRUE,
repeats = 5,
#classProbs = TRUE,
verboseIter = TRUE)
randomForestFit = train(x = rf.in[,2:23],
y = rf.in$y,
method = "rf",
trControl = myTrainingControl)
plot(varImp(randomForestFit))
pdf("ICI_projectR.TCGA.rf.SKCM.varImp.pdf")
plot(varImp(randomForestFit))
dev.off()
# model_rf
# plot(model_rf)
# varimp_mars <- varImp(model_rf)
# plot(varimp_mars, main="Variable Importance with RF")
#
# testData2 <- predict(preProcess_range_model, testData)
# predicted <- predict(model_rf, testData2)
#
# plot(testData$Sensitivity, predicted)
#TL.proj.LUSC <- subset(TL.proj$cancertype == ""
table(TL.proj$cancertype)
# model_rf = train(y ~ ., data=rf.in, method='rf')
# model_rf
# plot(model_rf)
# varimp_mars <- varImp(model_rf)
# plot(varimp_mars, main="Variable Importance with RF")
#
# testData2 <- predict(preProcess_range_model, testData)
# predicted <- predict(model_rf, testData2)
#
# plot(testData$Sensitivity, predicted)
TL.proj.LUSC <- subset(TL.proj$cancertype == "TCGA-LUSC")
# model_rf = train(y ~ ., data=rf.in, method='rf')
# model_rf
# plot(model_rf)
# varimp_mars <- varImp(model_rf)
# plot(varimp_mars, main="Variable Importance with RF")
#
# testData2 <- predict(preProcess_range_model, testData)
# predicted <- predict(model_rf, testData2)
#
# plot(testData$Sensitivity, predicted)
TL.proj.LUSC <- subset(TL.proj, cancertype == "TCGA-LUSC")
# Train random forest model to predict survival using patterns + age in melanoma (SKCM) tumors
y <- TL.proj.LUSC$OS.time
x <- TL.proj.LUSC[,c(1:21,24)]
rf.in <- cbind(y,x)
# scale age - you already scaled the patterns
rf.in$age <- scale(rf.in$age, center = T, scale = T)
# remove NAs
rf.in <- rf.in[-which(apply(rf.in, 1, function(a) sum(is.na(a)) > 0 )),]
model_rf = train(y ~ ., data=rf.in, method='rf')
model_rf
plot(model_rf)
varimp_mars <- varImp(model_rf)
plot(varimp_mars, main="Variable Importance with RF")
# testData2 <- predict(preProcess_range_model, testData)
predicted <- predict(model_rf, rf.in)
cor(rf.in$y, predicted)
model_rf$finalModel
randomForestFit$finalModel
model_rf$results
