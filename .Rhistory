#geom_point(alpha = 0.8, aes(fill = group), size = 1.5, shape = 21, position = position_jitterdodge()) +
#ylab("pattern weight")
dev.off()
}
for (i in 1:1){
# pp stands for per pattern
TL.proj.df.m.pp <- subset(TL.proj.df.m, pattern == paste0("Pattern_", i))
pdf(paste0("TL.pattern", i, ".faceted_boxplots.pdf"), width = 18, height = 14)
plt <- ggplot(TL.proj.df.m.pp, aes(x=group, y=weight, fill = group)) +
geom_boxplot(alpha=0.8, notch = T) + theme_bw() +
theme(axis.title=element_text(size=30),
axis.text.x=element_blank(), #element_text(size=rel(0.75), angle=45, hjust = 1),
axis.ticks.x=element_blank(),
strip.text.x = element_text(size = 20)) +
scale_fill_viridis_d() + ggtitle(NULL) +
facet_wrap(~cluster, scales = "free") +
theme(legend.position="bottom",
legend.text=element_text(size=15))
#geom_point(alpha = 0.8, aes(fill = group), size = 1.5, shape = 21, position = position_jitterdodge()) +
#ylab("pattern weight")
print(plt)
dev.off()
}
for (i in 1:1){
# pp stands for per pattern
TL.proj.df.m.pp <- subset(TL.proj.df.m, pattern == paste0("Pattern_", i))
pdf(paste0("TL.pattern", i, ".faceted_boxplots.pdf"), width = 18, height = 14)
plt <- ggplot(TL.proj.df.m.pp, aes(x=group, y=weight, fill = group)) +
geom_boxplot(alpha=0.8, notch = F) + theme_bw() +
theme(axis.title=element_text(size=30),
axis.text.x=element_blank(), #element_text(size=rel(0.75), angle=45, hjust = 1),
axis.ticks.x=element_blank(),
strip.text.x = element_text(size = 20)) +
scale_fill_viridis_d() + ggtitle(NULL) +
facet_wrap(~cluster, scales = "free") +
theme(legend.position="bottom",
legend.text=element_text(size=15))
#geom_point(alpha = 0.8, aes(fill = group), size = 1.5, shape = 21, position = position_jitterdodge()) +
#ylab("pattern weight")
print(plt)
dev.off()
}
View(sfanno)
# First do some preprocessing
# read in single cell annotations
sfanno <- read.csv("sfanno.csv", header = T)
# transpose TL projection data and convert to df
TL.proj.df = as.data.frame(t(TL.proj))
# add single cell annotatinos to TL.proj.df
mtch <- match(sfmeta$title, sfanno$Cell.Name)
# Also set cluster factors to cell types
TL.proj.df$cluster <- factor(sfanno[mtch,]$Cluster.number,
levels = c("B-cells",
"Plasma cells",
"Monocytes/Macrophages",
"Dendritic cells",
"Lymphocytes",
"Exhausted CD8+ T-cells",
"Regulatory T-cells",
"Cytotoxicity",
"Exhausted/HS CD8+ T-cells",
"Memory T-cells",
"Lymphocytes exhausted/cell-cycle"))
TL.proj.df$group <- rownames(TL.proj.df)
TL.proj.df$status <- sfmeta$status
TL.proj.df.m <- reshape2::melt(TL.proj.df, varnames = c("cluster", "group",
"status"), na.rm = FALSE, as.is = FALSE, value.name = "value")
# reformat group labels
colnames(TL.proj.df.m) <- c("cluster", "group", "status", "pattern", "weight")
TL.proj.df.m$group <- gsub(".", " ", TL.proj.df.m$group, fixed=T)
TL.proj.df.m$group <- gsub("[[:digit:]]", "", TL.proj.df.m$group)
TL.proj.df.m$group <- gsub("CTLA", "CTLA4", TL.proj.df.m$group)
TL.proj.df.m$group <- gsub("ponder ", "ponder", TL.proj.df.m$group)
TL.proj.df.m$group <- as.factor(TL.proj.df.m$group)
View(TL.proj.df)
# First do some preprocessing
# read in single cell annotations
sfanno <- read.csv("sfanno.csv", header = T)
# transpose TL projection data and convert to df
TL.proj.df = as.data.frame(t(TL.proj))
# add single cell annotatinos to TL.proj.df
mtch <- match(sfmeta$title, sfanno$Cell.Name)
TL.proj.df$cluster <- as.factor(sfanno[mtch,]$Cluster.number)
# Also set cluster factors to cell types
TL.proj.df$cluster <- factor(TL.proj.df$cluster,
levels = c("B-cells",
"Plasma cells",
"Monocytes/Macrophages",
"Dendritic cells",
"Lymphocytes",
"Exhausted CD8+ T-cells",
"Regulatory T-cells",
"Cytotoxicity",
"Exhausted/HS CD8+ T-cells",
"Memory T-cells",
"Lymphocytes exhausted/cell-cycle"))
View(TL.proj.df)
library(plyr)
# First do some preprocessing
# read in single cell annotations
sfanno <- read.csv("sfanno.csv", header = T)
# transpose TL projection data and convert to df
TL.proj.df = as.data.frame(t(TL.proj))
# add single cell annotatinos to TL.proj.df
mtch <- match(sfmeta$title, sfanno$Cell.Name)
TL.proj.df$cluster <- as.character(sfanno[mtch,]$Cluster.number)
# Also set cluster factors to cell types
plyr::revalue(TL.proj.df$cluster, c("1" = "B-cells",
"2" = "Plasma cells",
"3" = "Monocytes/Macrophages",
"4" = "Dendritic cells",
"5" = "Lymphocytes",
"6" = "Exhausted CD8+ T-cells",
"7" = "Regulatory T-cells",
"8" = "Cytotoxicity",
"9" = "Exhausted/HS CD8+ T-cells",
"10" = "Memory T-cells",
"11" = "Lymphocytes exhausted/cell-cycle"))
# Also set cluster factors to cell types
TL.proj.df$cluster <- plyr::revalue(TL.proj.df$cluster, c("1" = "B-cells",
"2" = "Plasma cells",
"3" = "Monocytes/Macrophages",
"4" = "Dendritic cells",
"5" = "Lymphocytes",
"6" = "Exhausted CD8+ T-cells",
"7" = "Regulatory T-cells",
"8" = "Cytotoxicity",
"9" = "Exhausted/HS CD8+ T-cells",
"10" = "Memory T-cells",
"11" = "Lymphocytes exhausted/cell-cycle"))
View(TL.proj.df)
TL.proj.df$group <- rownames(TL.proj.df)
TL.proj.df$status <- sfmeta$status
TL.proj.df.m <- reshape2::melt(TL.proj.df, varnames = c("cluster", "group",
"status"), na.rm = FALSE, as.is = FALSE, value.name = "value")
# reformat group labels
colnames(TL.proj.df.m) <- c("cluster", "group", "status", "pattern", "weight")
TL.proj.df.m$group <- gsub(".", " ", TL.proj.df.m$group, fixed=T)
TL.proj.df.m$group <- gsub("[[:digit:]]", "", TL.proj.df.m$group)
TL.proj.df.m$group <- gsub("CTLA", "CTLA4", TL.proj.df.m$group)
TL.proj.df.m$group <- gsub("ponder ", "ponder", TL.proj.df.m$group)
TL.proj.df.m$group <- as.factor(TL.proj.df.m$group)
for (i in 1:21){
# pp stands for per pattern
TL.proj.df.m.pp <- subset(TL.proj.df.m, pattern == paste0("Pattern_", i))
pdf(paste0("TL.pattern", i, ".faceted_boxplots.pdf"), width = 18, height = 14)
plt <- ggplot(TL.proj.df.m.pp, aes(x=group, y=weight, fill = group)) +
geom_boxplot(alpha=0.8, notch = F) + theme_bw() +
theme(axis.title=element_text(size=30),
axis.text.x=element_blank(), #element_text(size=rel(0.75), angle=45, hjust = 1),
axis.ticks.x=element_blank(),
strip.text.x = element_text(size = 20)) +
scale_fill_viridis_d() + ggtitle(NULL) +
facet_wrap(~cluster, scales = "free") +
theme(legend.position="bottom",
legend.text=element_text(size=15))
#geom_point(alpha = 0.8, aes(fill = group), size = 1.5, shape = 21, position = position_jitterdodge()) +
#ylab("pattern weight")
print(plt)
dev.off()
}
for (i in 1:21){
# pp stands for per pattern
TL.proj.df.m.pp <- subset(TL.proj.df.m, pattern == paste0("Pattern_", i))
pdf(paste0("TL.pattern", i, ".faceted_boxplots.pdf"), width = 18, height = 14)
plt <- ggplot(TL.proj.df.m.pp, aes(x=group, y=weight, fill = group)) +
geom_boxplot(alpha=0.8, notch = F) + theme_bw() +
theme(axis.title=element_text(size=30),
axis.text.x=element_blank(), #element_text(size=rel(0.75), angle=45, hjust = 1),
axis.ticks.x=element_blank(),
strip.text.x = element_text(size = 16)) +
scale_fill_viridis_d() + ggtitle(NULL) +
facet_wrap(~cluster, scales = "free") +
theme(legend.position="bottom",
legend.text=element_text(size=15))
#geom_point(alpha = 0.8, aes(fill = group), size = 1.5, shape = 21, position = position_jitterdodge()) +
#ylab("pattern weight")
print(plt)
dev.off()
}
for (i in 1:21){
# pp stands for per pattern
TL.proj.df.m.pp <- subset(TL.proj.df.m, pattern == paste0("Pattern_", i))
pdf(paste0("TL.pattern", i, ".faceted_boxplots.pdf"), width = 18, height = 14)
plt <- ggplot(TL.proj.df.m.pp, aes(x=group, y=weight, fill = group)) +
geom_violin(alpha=0.8, notch = F) + theme_bw() +
theme(axis.title=element_text(size=30),
axis.text.x=element_blank(), #element_text(size=rel(0.75), angle=45, hjust = 1),
axis.ticks.x=element_blank(),
strip.text.x = element_text(size = 16)) +
scale_fill_viridis_d() + ggtitle(NULL) +
facet_wrap(~cluster, scales = "free") +
theme(legend.position="bottom",
legend.text=element_text(size=15))
#geom_point(alpha = 0.8, aes(fill = group), size = 1.5, shape = 21, position = position_jitterdodge()) +
#ylab("pattern weight")
print(plt)
dev.off()
}
for (i in 1:21){
# pp stands for per pattern
TL.proj.df.m.pp <- subset(TL.proj.df.m, pattern == paste0("Pattern_", i))
pdf(paste0("dists.per_pattern.per_cell/TL.pattern", i, ".faceted_boxplots.pdf"), width = 18, height = 14)
plt <- ggplot(TL.proj.df.m.pp, aes(x=group, y=weight, fill = group)) +
geom_violin(alpha=0.8, notch = F) + theme_bw() +
theme(axis.title=element_text(size=30),
axis.text.x=element_blank(), #element_text(size=rel(0.75), angle=45, hjust = 1),
axis.ticks.x=element_blank(),
strip.text.x = element_text(size = 16)) +
scale_fill_viridis_d() + ggtitle(NULL) +
facet_wrap(~cluster, scales = "free") +
theme(legend.position="bottom",
legend.text=element_text(size=15))
#geom_point(alpha = 0.8, aes(fill = group), size = 1.5, shape = 21, position = position_jitterdodge()) +
#ylab("pattern weight")
print(plt)
dev.off()
}
for (i in 1:21){
# pp stands for per pattern
TL.proj.df.m.pp <- subset(TL.proj.df.m, pattern == paste0("Pattern_", i))
pdf(paste0("dists.per_pattern.per_cell/TL.pattern", i, ".faceted_violinplots.pdf"), width = 18, height = 14)
plt <- ggplot(TL.proj.df.m.pp, aes(x=group, y=weight, fill = group)) +
geom_violin(alpha=0.8, notch = F) + theme_bw() +
theme(axis.title=element_text(size=30),
axis.text.x=element_blank(), #element_text(size=rel(0.75), angle=45, hjust = 1),
axis.ticks.x=element_blank(),
strip.text.x = element_text(size = 16)) +
scale_fill_viridis_d() + ggtitle(NULL) +
facet_wrap(~cluster, scales = "free") +
theme(legend.position="bottom",
legend.text=element_text(size=15))
#geom_point(alpha = 0.8, aes(fill = group), size = 1.5, shape = 21, position = position_jitterdodge()) +
#ylab("pattern weight")
print(plt)
dev.off()
}
for (i in 1:21){
# pp stands for per pattern
TL.proj.df.m.pp <- subset(TL.proj.df.m, pattern == paste0("Pattern_", i))
pdf(paste0("dists.per_pattern.per_cell/TL.pattern", i, ".faceted_boxplots.pdf"), width = 18, height = 14)
plt <- ggplot(TL.proj.df.m.pp, aes(x=group, y=weight, fill = group)) +
geom_boxplot(alpha=0.8, notch = F) + theme_bw() +
theme(axis.title=element_text(size=30),
axis.text.x=element_blank(), #element_text(size=rel(0.75), angle=45, hjust = 1),
axis.ticks.x=element_blank(),
strip.text.x = element_text(size = 16)) +
scale_fill_viridis_d() + ggtitle(NULL) +
facet_wrap(~cluster, scales = "free") +
theme(legend.position="bottom",
legend.text=element_text(size=15))
#geom_point(alpha = 0.8, aes(fill = group), size = 1.5, shape = 21, position = position_jitterdodge()) +
#ylab("pattern weight")
print(plt)
dev.off()
}
for (i in 1:21){
# pp stands for per pattern
TL.proj.df.m.pp <- subset(TL.proj.df.m, pattern == paste0("Pattern_", i))
pdf(paste0("dists.per_pattern.per_cell/TL.pattern", i, ".faceted_violinplots.pdf"), width = 18, height = 14)
plt <- ggplot(TL.proj.df.m.pp, aes(x=group, y=weight, fill = group)) +
geom_violin(alpha=0.8, notch = F) + theme_bw() +
theme(axis.title=element_text(size=30),
axis.text.x=element_blank(), #element_text(size=rel(0.75), angle=45, hjust = 1),
axis.ticks.x=element_blank(),
strip.text.x = element_text(size = 16)) +
scale_fill_viridis_d() + ggtitle(NULL) +
facet_wrap(~cluster, scales = "free") +
theme(legend.position="bottom",
legend.text=element_text(size=15))
#geom_point(alpha = 0.8, aes(fill = group), size = 1.5, shape = 21, position = position_jitterdodge()) +
#ylab("pattern weight")
print(plt)
dev.off()
}
warnings()
for (i in 1:21){
# pp stands for per pattern
TL.proj.df.m.pp <- subset(TL.proj.df.m, pattern == paste0("Pattern_", i))
pdf(paste0("dists.per_pattern.per_cell/TL.pattern", i, ".faceted_violinplots.pdf"), width = 18, height = 14)
plt <- ggplot(TL.proj.df.m.pp, aes(x=group, y=weight, fill = group)) +
geom_violin(alpha=0.8) + theme_bw() +
theme(axis.title=element_text(size=30),
axis.text.x=element_blank(), #element_text(size=rel(0.75), angle=45, hjust = 1),
axis.ticks.x=element_blank(),
strip.text.x = element_text(size = 16)) +
scale_fill_viridis_d() + ggtitle(NULL) +
facet_wrap(~cluster, scales = "free") +
theme(legend.position="bottom",
legend.text=element_text(size=15))
#geom_point(alpha = 0.8, aes(fill = group), size = 1.5, shape = 21, position = position_jitterdodge()) +
#ylab("pattern weight")
print(plt)
dev.off()
}
library(projectR)
library(CePa)
library(org.Hs.eg.db)
library(biomaRt)
library(gplots)
library(reshape2)
library(ggplot2)
library(CoGAPS)
library(data.table)
library(ComplexHeatmap)
library(viridis)
library(GEOquery)
library(RColorBrewer)
library(ROCR)
library(dplyr)
library(ggalluvial)
library(TCGAbiolinks)
library(SummarizedExperiment)
# set working directory
setwd('/Users/michaelkessler/Dropbox/Workspace/POSTDOC/ImmunoOncology/NK_CTLA4')
# vector of cancer type names
cancer_types <- c("LAML", "ACC","BLCA", "LGG", "BRCA", "CESC", "CHOL",
"LCML", "COAD", "CNTL", "ESCA", "FPPP", "GBM", "HNSC",
"KICH", "KIRC", "KIRP", "LIHC", "LUAD", "LUSC", "DLBC",
"MESO", "MISC", "OV", "PAAD", "PCPG", "PRAD", "READ",
"SARC", "SKCM", "STAD", "TGCT","THYM", "THCA", "UCS",
"UCEC")
# format query labels
TCGA_cancer_labels <- paste0("TCGA-", cancer_types)
# download data per cancer type using TCGABioLinks
TCGA_data <- list() # list of tissue specific TCGA data frames
for (ct in TCGA_cancer_labels){
# use TCGABioLinks to download data and parse into dataframes
# define data you want to download
query <- GDCquery(project = ct,
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
legacy = TRUE)
# download data
GDCdownload(query, method = "api", files.per.chunk = 10)
# parse/prepare the data
TCGAdata <- GDCprepare(query)
# store cancer type specific meta data
metaTCGA <- as.data.frame(SummarizedExperiment::colData(data))
# store cancer type specific expression data
expTCGA <- as.matrix(SummarizedExperiment::assay(data))
# store this data in the TCGA_data list
TCGA_data[[ct]] <- list()
TCGA_data[[ct]][["meta"]] <- metaTCGA
TCGA_data[[ct]][["exp"]] <- expTCGA
}
TCGA_data <- list() # list of tissue specific TCGA data frames
for (ct in TCGA_cancer_labels){
# use TCGABioLinks to download data and parse into dataframes
# define data you want to download
query <- GDCquery(project = ct,
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
legacy = TRUE)
# download data
GDCdownload(query, method = "api", files.per.chunk = 10)
# parse/prepare the data
TCGAdata <- GDCprepare(query)
# store cancer type specific meta data
metaTCGA <- as.data.frame(SummarizedExperiment::colData(TCGAdata))
# store cancer type specific expression data
expTCGA <- as.matrix(SummarizedExperiment::assay(TCGAdata))
# store this data in the TCGA_data list
TCGA_data[[ct]] <- list()
TCGA_data[[ct]][["meta"]] <- metaTCGA
TCGA_data[[ct]][["exp"]] <- expTCGA
}
###################################################
### download data per cancer type
###################################################
# NOTE: the following cancer type names failed query/download:
# "LCML"
#
# vector of cancer type names
cancer_types <- #c("LAML", "ACC","BLCA", "LGG", "BRCA", "CESC", "CHOL",
c("COAD", "CNTL", "ESCA", "FPPP", "GBM", "HNSC",
"KICH", "KIRC", "KIRP", "LIHC", "LUAD", "LUSC", "DLBC",
"MESO", "MISC", "OV", "PAAD", "PCPG", "PRAD", "READ",
"SARC", "SKCM", "STAD", "TGCT","THYM", "THCA", "UCS",
"UCEC")
# format query labels
TCGA_cancer_labels <- paste0("TCGA-", cancer_types)
###################################################
### download data per cancer type
###################################################
# NOTE: the following cancer type names failed query/download:
# "LCML"
#
# vector of cancer type names
#cancer_types <- c("LAML", "ACC","BLCA", "LGG", "BRCA", "CESC", "CHOL",
cancer_types <- c("COAD", "CNTL", "ESCA", "FPPP", "GBM", "HNSC",
"KICH", "KIRC", "KIRP", "LIHC", "LUAD", "LUSC", "DLBC",
"MESO", "MISC", "OV", "PAAD", "PCPG", "PRAD", "READ",
"SARC", "SKCM", "STAD", "TGCT","THYM", "THCA", "UCS",
"UCEC")
# format query labels
TCGA_cancer_labels <- paste0("TCGA-", cancer_types)
for (ct in TCGA_cancer_labels){
# use TCGABioLinks to download data and parse into dataframes
# define data you want to download
query <- GDCquery(project = ct,
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
legacy = TRUE)
# download data
GDCdownload(query, method = "api", files.per.chunk = 10)
# parse/prepare the data
TCGAdata <- GDCprepare(query)
# store cancer type specific meta data
metaTCGA <- as.data.frame(SummarizedExperiment::colData(TCGAdata))
# store cancer type specific expression data
expTCGA <- as.matrix(SummarizedExperiment::assay(TCGAdata))
# store this data in the TCGA_data list
TCGA_data[[ct]] <- list()
TCGA_data[[ct]][["meta"]] <- metaTCGA
TCGA_data[[ct]][["exp"]] <- expTCGA
}
getDataCategorySummary(project, legacy = TRUE)
###################################################
### download data per cancer type
###################################################
# get valid project IDs
TCGAbiolinks:::getGDCprojects()$project_id)
###################################################
### download data per cancer type
###################################################
# get valid project IDs
TCGAbiolinks:::getGDCprojects()$project_id
###################################################
### download data per cancer type
###################################################
# get valid project IDs
grep("CNTL", TCGAbiolinks:::getGDCprojects()$project_id)
###################################################
### download data per cancer type
###################################################
# get valid project IDs
grep("LCML", TCGAbiolinks:::getGDCprojects()$project_id)
###################################################
### download data per cancer type
###################################################
# get valid project IDs
grep("LCML", TCGAbiolinks:::getGDCprojects()$project_id)
###################################################
### download data per cancer type
###################################################
# get valid project IDs
grep("TCGA", TCGAbiolinks:::getGDCprojects()$project_id)
project_IDs[grep("TCGA", TCGAbiolinks:::getGDCprojects()$project_id)]
###################################################
### download data per cancer type
###################################################
# get valid project IDs
project_IDs <- TCGAbiolinks:::getGDCprojects()$project_id
project_IDs[grep("TCGA", TCGAbiolinks:::getGDCprojects()$project_id)]
project_IDs[grep("TCGA", TCGAbiolinks:::getGDCprojects()$project_id, invert = T)]
###################################################
### download data per cancer type
###################################################
# get valid project IDs
project_IDs <- TCGAbiolinks:::getGDCprojects()$project_id
# get "TCGA" named projects
cancer_types <- project_IDs[grep("TCGA", TCGAbiolinks:::getGDCprojects()$project_id, invert = T)]
# add a few other interesting projects
cancer_types <- c(cancer_types, "TARGET-CCSK", "TARGET-NBL", "TARGET-AML",
"TARGET-ALL-P1", "TARGET-ALL-P2", "TARGET-ALL-P3")
cancer_types
###################################################
### download data per cancer type
###################################################
# get valid project IDs
project_IDs <- TCGAbiolinks:::getGDCprojects()$project_id
# get "TCGA" named projects
cancer_types <- project_IDs[grep("TCGA", TCGAbiolinks:::getGDCprojects()$project_id)]
# add a few other interesting projects
cancer_types <- c(cancer_types, "TARGET-CCSK", "TARGET-NBL", "TARGET-AML",
"TARGET-ALL-P1", "TARGET-ALL-P2", "TARGET-ALL-P3")
cancer_types
# download data per cancer type using TCGABioLinks
TCGA_data <- list() # list of tissue specific TCGA data frames
for (ct in TCGA_cancer_labels){
# use TCGABioLinks to download data and parse into dataframes
# define data you want to download
query <- GDCquery(project = ct,
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
legacy = TRUE)
# download data
GDCdownload(query, method = "api", files.per.chunk = 10)
# parse/prepare the data
TCGAdata <- GDCprepare(query)
# store cancer type specific meta data
metaTCGA <- as.data.frame(SummarizedExperiment::colData(TCGAdata))
# store cancer type specific expression data
expTCGA <- as.matrix(SummarizedExperiment::assay(TCGAdata))
# store this data in the TCGA_data list
TCGA_data[[ct]] <- list()
TCGA_data[[ct]][["meta"]] <- metaTCGA
TCGA_data[[ct]][["exp"]] <- expTCGA
}
